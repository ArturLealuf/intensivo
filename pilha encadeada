#pilha sequencial
'''arvore binaria; arvore pretovermelho
avl; mapa (hash)'''
'''class nodo:
    def __init__(self, dado):
        self.dado = dado
'''

class PilhaSequencial:
    def __init__(self, tamanhoMaximo):
        self.pilha = []
        self.tamanhoMaximo = tamanhoMaximo- 1
        self.topo = 0
    
    def remover(self):
        self.pilha.topo = None

    def inserirNodo(self, nodo):
        self.pilha.append(None)
        self.pilha[0] = nodo
        return

minhapilha = PilhaSequencial

minhapilha.inserirNodo('pilha', 42938)

#print(pilha)


class Nodo:
    """Esta classe representa um nodo de uma estrutura encadeada."""
    def __init__(self, dado=0, nodo_anterior=None):
        self.dado = dado
        self.anterior = nodo_anterior

    def __repr__(self):
        return '%s -> %s' % (self.dado, self.anterior)


class Pilha:
    """Esta classe representa uma pilha usando uma estrutura encadeada."""

    def __init__(self):
        self.topo = None


    def __repr__(self):
        return "[" + str(self.topo) + "]"

    def insere(self, novo_dado):


    # Cria um novo nodo com o dado a ser armazenado.
        novo_nodo = Nodo(novo_dado)

    # Faz com que o novo nodo seja o topo da pilha.
        novo_nodo.anterior = self.topo

    # Faz com que a cabeça da lista referencie o novo nodo.
        self.topo = novo_nodo


    def remove(self):
        assert self.topo, "Impossível remover valor de pilha vazia."

        self.topo = self.topo.anterior

    # Cria uma pilha vazia.
pilha = Pilha()
print("Pilha vazia: ", pilha)

# Insere elementos na pilha.
for i in range(5):
    pilha.insere(i)
    print("Insere o valor {0} no topo da pilha: {1}".format(i, pilha))

# Remove elementos na pilha.
while pilha.topo != None:
    pilha.remove()
    print("Removendo elemento que está no topo da pilha: ", pilha)
